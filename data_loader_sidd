import os
import random
import numpy as np
import torch
from torch.utils.data import Dataset, DataLoader
from torchvision.transforms import functional as F
from dataloader.data_process_sidd import  read_image, read_image_train
import glob
from dataloader.bay_aug import bayer_unify,bayer_aug


class DngTrainset(Dataset):

    def __init__(self):

        train_fns = glob.glob('Data_sidd/*L')

        self.train_fns = train_fns
   
    def __len__(self):
        return len(self.train_fns)

    def __getitem__(self, idx):
    
        id = self.train_fns[idx]

        in_files = '%s'%id + '/' + 'NOISY_RAW_010.MAT'

        gt_files = '%s'%id + '/' + 'GT_RAW_010.MAT'

        h_pro = np.random.random()
        w_pro = np.random.random()

        # gt_files = glob.glob('%s'%id + '/' + 'GT*0.MAT')[0]

        # in_files = glob.glob('%s'%id + '/' + 'NOI*0.MAT')[0]

        image= read_image_train(in_files, h_pro, w_pro)

        image_nchw= np.expand_dims(image, axis = 0).transpose(0,3,1,2)

        image_tensor = torch.from_numpy(image_nchw).float()

        H , W = image.shape[0:2]

        label= read_image_train(gt_files,h_pro, w_pro)

        label_nchw = np.expand_dims(label , axis = 0).transpose(0,3,1,2)

        label_tensor = torch.from_numpy(label_nchw).float()
 
        ##add noise
        # noise = random.random() < 0.5
        # if noise:        
        #     # shot_noise, read_noise = random_noise_levels()
        #     # image  = add_noise(image, shot_noise, read_noise)
        #     image = add_noise(image)

        return image_tensor, label_tensor, H, W


class DngValidset(Dataset):

    def __init__(self):


        valid_fns = glob.glob('Data_sidd/*L')

        self.valid_fns = valid_fns[11:13]


    def __len__(self):

        return len(self.valid_fns)

    def __getitem__(self, idx):

        
        id = self.valid_fns[idx]

        in_files = '%s'%id + '/' + 'NOISY_RAW_010.MAT'

        gt_files = '%s'%id + '/' + 'GT_RAW_010.MAT'

        # gt_files = glob.glob('%s'%id + '/' + 'GT*0.MAT')[0]

        # in_files = glob.glob('%s'%id + '/' + 'NOI*0.MAT')[0]

        image= read_image(in_files)
          
        image_nchw= np.expand_dims(image, axis = 0).transpose(0,3,1,2)

        image_tensor = torch.from_numpy(image_nchw).float()

        H , W = image.shape[0:2]

        label= read_image(gt_files)

        label_nchw = np.expand_dims(label , axis = 0).transpose(0,3,1,2)

        label_tensor = torch.from_numpy(label_nchw).float()
 
      
        return image_tensor, label_tensor, H, W


class DngTestset(Dataset):

    def __init__(self):

        self.test_fns = glob.glob('Data_sidd/*L')[-24:-8:4]
    
        print('Test examples = ',  len(self.test_fns))


    def __len__(self):
        return len(self.test_fns)
    
    def __getitem__(self, idx):

        id = self.test_fns[idx]       

        in_files = '%s'%id + '/' + 'NOISY_RAW_010.MAT'

        gt_files = '%s'%id + '/' + 'GT_RAW_010.MAT'

        image= read_image(in_files)
          
        image_nchw= np.expand_dims(image, axis = 0).transpose(0,3,1,2)

        image_tensor = torch.from_numpy(image_nchw).float()

        H , W = image.shape[0:2]

        label= read_image(gt_files)

        label_nchw = np.expand_dims(label , axis = 0).transpose(0,3,1,2)

        label_tensor = torch.from_numpy(label_nchw).float()
      
        return image_tensor, label_tensor, H, W, in_files


def train_dataloader( batch_size, num_workers):

    dataloader = DataLoader(
        DngTrainset(),
        batch_size=batch_size,
        shuffle=True,
        num_workers=num_workers,
        # pin_memory=True
    )
    return dataloader



def valid_dataloader(batch_size=1, num_workers=1):

    dataloader = DataLoader(
        DngValidset(),
        batch_size=batch_size,
        shuffle=False,
        num_workers=num_workers
    )
    return dataloader


def test_dataloader(batch_size=1, num_workers=0):
    dataloader = DataLoader(
        DngTestset(), 
        batch_size=batch_size,
        shuffle=False,
        num_workers=num_workers,
        # pin_memory=True
    )
    return dataloader
